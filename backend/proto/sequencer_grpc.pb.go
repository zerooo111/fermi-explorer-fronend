// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: sequencer.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SequencerService_SubmitTransaction_FullMethodName = "/continuum.sequencer.v1.SequencerService/SubmitTransaction"
	SequencerService_SubmitBatch_FullMethodName       = "/continuum.sequencer.v1.SequencerService/SubmitBatch"
	SequencerService_GetStatus_FullMethodName         = "/continuum.sequencer.v1.SequencerService/GetStatus"
	SequencerService_StreamTicks_FullMethodName       = "/continuum.sequencer.v1.SequencerService/StreamTicks"
	SequencerService_GetTransaction_FullMethodName    = "/continuum.sequencer.v1.SequencerService/GetTransaction"
	SequencerService_GetTick_FullMethodName           = "/continuum.sequencer.v1.SequencerService/GetTick"
	SequencerService_GetChainState_FullMethodName     = "/continuum.sequencer.v1.SequencerService/GetChainState"
)

// SequencerServiceClient is the client API for SequencerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SequencerServiceClient interface {
	// Submit a transaction for ordering
	SubmitTransaction(ctx context.Context, in *SubmitTransactionRequest, opts ...grpc.CallOption) (*SubmitTransactionResponse, error)
	// Submit multiple transactions in batch
	SubmitBatch(ctx context.Context, in *SubmitBatchRequest, opts ...grpc.CallOption) (*SubmitBatchResponse, error)
	// Get current sequencer status
	GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error)
	// Stream live ticks
	StreamTicks(ctx context.Context, in *StreamTicksRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Tick], error)
	// Get transaction info by hash
	GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*GetTransactionResponse, error)
	// Get tick by number
	GetTick(ctx context.Context, in *GetTickRequest, opts ...grpc.CallOption) (*GetTickResponse, error)
	// Get chain state summary
	GetChainState(ctx context.Context, in *GetChainStateRequest, opts ...grpc.CallOption) (*GetChainStateResponse, error)
}

type sequencerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSequencerServiceClient(cc grpc.ClientConnInterface) SequencerServiceClient {
	return &sequencerServiceClient{cc}
}

func (c *sequencerServiceClient) SubmitTransaction(ctx context.Context, in *SubmitTransactionRequest, opts ...grpc.CallOption) (*SubmitTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitTransactionResponse)
	err := c.cc.Invoke(ctx, SequencerService_SubmitTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequencerServiceClient) SubmitBatch(ctx context.Context, in *SubmitBatchRequest, opts ...grpc.CallOption) (*SubmitBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitBatchResponse)
	err := c.cc.Invoke(ctx, SequencerService_SubmitBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequencerServiceClient) GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStatusResponse)
	err := c.cc.Invoke(ctx, SequencerService_GetStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequencerServiceClient) StreamTicks(ctx context.Context, in *StreamTicksRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Tick], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SequencerService_ServiceDesc.Streams[0], SequencerService_StreamTicks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamTicksRequest, Tick]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SequencerService_StreamTicksClient = grpc.ServerStreamingClient[Tick]

func (c *sequencerServiceClient) GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*GetTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionResponse)
	err := c.cc.Invoke(ctx, SequencerService_GetTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequencerServiceClient) GetTick(ctx context.Context, in *GetTickRequest, opts ...grpc.CallOption) (*GetTickResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTickResponse)
	err := c.cc.Invoke(ctx, SequencerService_GetTick_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequencerServiceClient) GetChainState(ctx context.Context, in *GetChainStateRequest, opts ...grpc.CallOption) (*GetChainStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChainStateResponse)
	err := c.cc.Invoke(ctx, SequencerService_GetChainState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SequencerServiceServer is the server API for SequencerService service.
// All implementations must embed UnimplementedSequencerServiceServer
// for forward compatibility.
type SequencerServiceServer interface {
	// Submit a transaction for ordering
	SubmitTransaction(context.Context, *SubmitTransactionRequest) (*SubmitTransactionResponse, error)
	// Submit multiple transactions in batch
	SubmitBatch(context.Context, *SubmitBatchRequest) (*SubmitBatchResponse, error)
	// Get current sequencer status
	GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error)
	// Stream live ticks
	StreamTicks(*StreamTicksRequest, grpc.ServerStreamingServer[Tick]) error
	// Get transaction info by hash
	GetTransaction(context.Context, *GetTransactionRequest) (*GetTransactionResponse, error)
	// Get tick by number
	GetTick(context.Context, *GetTickRequest) (*GetTickResponse, error)
	// Get chain state summary
	GetChainState(context.Context, *GetChainStateRequest) (*GetChainStateResponse, error)
	mustEmbedUnimplementedSequencerServiceServer()
}

// UnimplementedSequencerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSequencerServiceServer struct{}

func (UnimplementedSequencerServiceServer) SubmitTransaction(context.Context, *SubmitTransactionRequest) (*SubmitTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTransaction not implemented")
}
func (UnimplementedSequencerServiceServer) SubmitBatch(context.Context, *SubmitBatchRequest) (*SubmitBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitBatch not implemented")
}
func (UnimplementedSequencerServiceServer) GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedSequencerServiceServer) StreamTicks(*StreamTicksRequest, grpc.ServerStreamingServer[Tick]) error {
	return status.Errorf(codes.Unimplemented, "method StreamTicks not implemented")
}
func (UnimplementedSequencerServiceServer) GetTransaction(context.Context, *GetTransactionRequest) (*GetTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransaction not implemented")
}
func (UnimplementedSequencerServiceServer) GetTick(context.Context, *GetTickRequest) (*GetTickResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTick not implemented")
}
func (UnimplementedSequencerServiceServer) GetChainState(context.Context, *GetChainStateRequest) (*GetChainStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChainState not implemented")
}
func (UnimplementedSequencerServiceServer) mustEmbedUnimplementedSequencerServiceServer() {}
func (UnimplementedSequencerServiceServer) testEmbeddedByValue()                          {}

// UnsafeSequencerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SequencerServiceServer will
// result in compilation errors.
type UnsafeSequencerServiceServer interface {
	mustEmbedUnimplementedSequencerServiceServer()
}

func RegisterSequencerServiceServer(s grpc.ServiceRegistrar, srv SequencerServiceServer) {
	// If the following call pancis, it indicates UnimplementedSequencerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SequencerService_ServiceDesc, srv)
}

func _SequencerService_SubmitTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequencerServiceServer).SubmitTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SequencerService_SubmitTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequencerServiceServer).SubmitTransaction(ctx, req.(*SubmitTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequencerService_SubmitBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequencerServiceServer).SubmitBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SequencerService_SubmitBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequencerServiceServer).SubmitBatch(ctx, req.(*SubmitBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequencerService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequencerServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SequencerService_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequencerServiceServer).GetStatus(ctx, req.(*GetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequencerService_StreamTicks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamTicksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SequencerServiceServer).StreamTicks(m, &grpc.GenericServerStream[StreamTicksRequest, Tick]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SequencerService_StreamTicksServer = grpc.ServerStreamingServer[Tick]

func _SequencerService_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequencerServiceServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SequencerService_GetTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequencerServiceServer).GetTransaction(ctx, req.(*GetTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequencerService_GetTick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTickRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequencerServiceServer).GetTick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SequencerService_GetTick_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequencerServiceServer).GetTick(ctx, req.(*GetTickRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequencerService_GetChainState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChainStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequencerServiceServer).GetChainState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SequencerService_GetChainState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequencerServiceServer).GetChainState(ctx, req.(*GetChainStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SequencerService_ServiceDesc is the grpc.ServiceDesc for SequencerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SequencerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "continuum.sequencer.v1.SequencerService",
	HandlerType: (*SequencerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitTransaction",
			Handler:    _SequencerService_SubmitTransaction_Handler,
		},
		{
			MethodName: "SubmitBatch",
			Handler:    _SequencerService_SubmitBatch_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _SequencerService_GetStatus_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _SequencerService_GetTransaction_Handler,
		},
		{
			MethodName: "GetTick",
			Handler:    _SequencerService_GetTick_Handler,
		},
		{
			MethodName: "GetChainState",
			Handler:    _SequencerService_GetChainState_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamTicks",
			Handler:       _SequencerService_StreamTicks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sequencer.proto",
}
