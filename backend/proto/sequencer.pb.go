// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: sequencer.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Transaction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique transaction identifier
	TxId string `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	// Transaction payload (application-specific)
	Payload []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	// Client signature
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	// Client public key
	PublicKey []byte `protobuf:"bytes,4,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// Nonce for replay protection
	Nonce uint64 `protobuf:"varint,5,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// Client-provided timestamp (microseconds since epoch)
	Timestamp     uint64 `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	mi := &file_sequencer_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_sequencer_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_sequencer_proto_rawDescGZIP(), []int{0}
}

func (x *Transaction) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *Transaction) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *Transaction) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *Transaction) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *Transaction) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *Transaction) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type SubmitTransactionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Transaction   *Transaction           `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitTransactionRequest) Reset() {
	*x = SubmitTransactionRequest{}
	mi := &file_sequencer_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitTransactionRequest) ProtoMessage() {}

func (x *SubmitTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sequencer_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitTransactionRequest.ProtoReflect.Descriptor instead.
func (*SubmitTransactionRequest) Descriptor() ([]byte, []int) {
	return file_sequencer_proto_rawDescGZIP(), []int{1}
}

func (x *SubmitTransactionRequest) GetTransaction() *Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

type SubmitTransactionResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Assigned sequence number
	SequenceNumber uint64 `protobuf:"varint,1,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	// Expected tick number for inclusion
	ExpectedTick uint64 `protobuf:"varint,2,opt,name=expected_tick,json=expectedTick,proto3" json:"expected_tick,omitempty"`
	// Transaction hash
	TxHash        string `protobuf:"bytes,3,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitTransactionResponse) Reset() {
	*x = SubmitTransactionResponse{}
	mi := &file_sequencer_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitTransactionResponse) ProtoMessage() {}

func (x *SubmitTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sequencer_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitTransactionResponse.ProtoReflect.Descriptor instead.
func (*SubmitTransactionResponse) Descriptor() ([]byte, []int) {
	return file_sequencer_proto_rawDescGZIP(), []int{2}
}

func (x *SubmitTransactionResponse) GetSequenceNumber() uint64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *SubmitTransactionResponse) GetExpectedTick() uint64 {
	if x != nil {
		return x.ExpectedTick
	}
	return 0
}

func (x *SubmitTransactionResponse) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

type SubmitBatchRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Transactions  []*Transaction         `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitBatchRequest) Reset() {
	*x = SubmitBatchRequest{}
	mi := &file_sequencer_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitBatchRequest) ProtoMessage() {}

func (x *SubmitBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sequencer_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitBatchRequest.ProtoReflect.Descriptor instead.
func (*SubmitBatchRequest) Descriptor() ([]byte, []int) {
	return file_sequencer_proto_rawDescGZIP(), []int{3}
}

func (x *SubmitBatchRequest) GetTransactions() []*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type SubmitBatchResponse struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Responses     []*SubmitTransactionResponse `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitBatchResponse) Reset() {
	*x = SubmitBatchResponse{}
	mi := &file_sequencer_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitBatchResponse) ProtoMessage() {}

func (x *SubmitBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sequencer_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitBatchResponse.ProtoReflect.Descriptor instead.
func (*SubmitBatchResponse) Descriptor() ([]byte, []int) {
	return file_sequencer_proto_rawDescGZIP(), []int{4}
}

func (x *SubmitBatchResponse) GetResponses() []*SubmitTransactionResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type GetStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetStatusRequest) Reset() {
	*x = GetStatusRequest{}
	mi := &file_sequencer_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatusRequest) ProtoMessage() {}

func (x *GetStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sequencer_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatusRequest.ProtoReflect.Descriptor instead.
func (*GetStatusRequest) Descriptor() ([]byte, []int) {
	return file_sequencer_proto_rawDescGZIP(), []int{5}
}

type GetStatusResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Current tick number
	CurrentTick uint64 `protobuf:"varint,1,opt,name=current_tick,json=currentTick,proto3" json:"current_tick,omitempty"`
	// Transactions processed
	TotalTransactions uint64 `protobuf:"varint,2,opt,name=total_transactions,json=totalTransactions,proto3" json:"total_transactions,omitempty"`
	// Pending transactions in queue
	PendingTransactions uint64 `protobuf:"varint,3,opt,name=pending_transactions,json=pendingTransactions,proto3" json:"pending_transactions,omitempty"`
	// Sequencer uptime in seconds
	UptimeSeconds uint64 `protobuf:"varint,4,opt,name=uptime_seconds,json=uptimeSeconds,proto3" json:"uptime_seconds,omitempty"`
	// Current TPS rate
	TransactionsPerSecond float64 `protobuf:"fixed64,5,opt,name=transactions_per_second,json=transactionsPerSecond,proto3" json:"transactions_per_second,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *GetStatusResponse) Reset() {
	*x = GetStatusResponse{}
	mi := &file_sequencer_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatusResponse) ProtoMessage() {}

func (x *GetStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sequencer_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatusResponse.ProtoReflect.Descriptor instead.
func (*GetStatusResponse) Descriptor() ([]byte, []int) {
	return file_sequencer_proto_rawDescGZIP(), []int{6}
}

func (x *GetStatusResponse) GetCurrentTick() uint64 {
	if x != nil {
		return x.CurrentTick
	}
	return 0
}

func (x *GetStatusResponse) GetTotalTransactions() uint64 {
	if x != nil {
		return x.TotalTransactions
	}
	return 0
}

func (x *GetStatusResponse) GetPendingTransactions() uint64 {
	if x != nil {
		return x.PendingTransactions
	}
	return 0
}

func (x *GetStatusResponse) GetUptimeSeconds() uint64 {
	if x != nil {
		return x.UptimeSeconds
	}
	return 0
}

func (x *GetStatusResponse) GetTransactionsPerSecond() float64 {
	if x != nil {
		return x.TransactionsPerSecond
	}
	return 0
}

type StreamTicksRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Start from this tick number (0 = latest)
	StartTick     uint64 `protobuf:"varint,1,opt,name=start_tick,json=startTick,proto3" json:"start_tick,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamTicksRequest) Reset() {
	*x = StreamTicksRequest{}
	mi := &file_sequencer_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamTicksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamTicksRequest) ProtoMessage() {}

func (x *StreamTicksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sequencer_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamTicksRequest.ProtoReflect.Descriptor instead.
func (*StreamTicksRequest) Descriptor() ([]byte, []int) {
	return file_sequencer_proto_rawDescGZIP(), []int{7}
}

func (x *StreamTicksRequest) GetStartTick() uint64 {
	if x != nil {
		return x.StartTick
	}
	return 0
}

type Tick struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Tick sequence number
	TickNumber uint64 `protobuf:"varint,1,opt,name=tick_number,json=tickNumber,proto3" json:"tick_number,omitempty"`
	// VDF proof for this tick
	VdfProof *VdfProof `protobuf:"bytes,2,opt,name=vdf_proof,json=vdfProof,proto3" json:"vdf_proof,omitempty"`
	// Ordered transactions in this tick
	Transactions []*OrderedTransaction `protobuf:"bytes,3,rep,name=transactions,proto3" json:"transactions,omitempty"`
	// Hash of all transactions in this tick
	TransactionBatchHash string `protobuf:"bytes,4,opt,name=transaction_batch_hash,json=transactionBatchHash,proto3" json:"transaction_batch_hash,omitempty"`
	// Timestamp when tick was produced
	Timestamp uint64 `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Previous tick's VDF output (chaining)
	PreviousOutput string `protobuf:"bytes,6,opt,name=previous_output,json=previousOutput,proto3" json:"previous_output,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Tick) Reset() {
	*x = Tick{}
	mi := &file_sequencer_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tick) ProtoMessage() {}

func (x *Tick) ProtoReflect() protoreflect.Message {
	mi := &file_sequencer_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tick.ProtoReflect.Descriptor instead.
func (*Tick) Descriptor() ([]byte, []int) {
	return file_sequencer_proto_rawDescGZIP(), []int{8}
}

func (x *Tick) GetTickNumber() uint64 {
	if x != nil {
		return x.TickNumber
	}
	return 0
}

func (x *Tick) GetVdfProof() *VdfProof {
	if x != nil {
		return x.VdfProof
	}
	return nil
}

func (x *Tick) GetTransactions() []*OrderedTransaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *Tick) GetTransactionBatchHash() string {
	if x != nil {
		return x.TransactionBatchHash
	}
	return ""
}

func (x *Tick) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Tick) GetPreviousOutput() string {
	if x != nil {
		return x.PreviousOutput
	}
	return ""
}

type VdfProof struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// VDF input (hex-encoded)
	Input string `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	// VDF output (hex-encoded)
	Output string `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
	// VDF proof (hex-encoded)
	Proof string `protobuf:"bytes,3,opt,name=proof,proto3" json:"proof,omitempty"`
	// Number of iterations
	Iterations    uint64 `protobuf:"varint,4,opt,name=iterations,proto3" json:"iterations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VdfProof) Reset() {
	*x = VdfProof{}
	mi := &file_sequencer_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VdfProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VdfProof) ProtoMessage() {}

func (x *VdfProof) ProtoReflect() protoreflect.Message {
	mi := &file_sequencer_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VdfProof.ProtoReflect.Descriptor instead.
func (*VdfProof) Descriptor() ([]byte, []int) {
	return file_sequencer_proto_rawDescGZIP(), []int{9}
}

func (x *VdfProof) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *VdfProof) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *VdfProof) GetProof() string {
	if x != nil {
		return x.Proof
	}
	return ""
}

func (x *VdfProof) GetIterations() uint64 {
	if x != nil {
		return x.Iterations
	}
	return 0
}

type OrderedTransaction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Original transaction
	Transaction *Transaction `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	// Assigned sequence number within tick
	SequenceNumber uint64 `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	// Transaction hash
	TxHash string `protobuf:"bytes,3,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	// Ingestion timestamp
	IngestionTimestamp uint64 `protobuf:"varint,4,opt,name=ingestion_timestamp,json=ingestionTimestamp,proto3" json:"ingestion_timestamp,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *OrderedTransaction) Reset() {
	*x = OrderedTransaction{}
	mi := &file_sequencer_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderedTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderedTransaction) ProtoMessage() {}

func (x *OrderedTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_sequencer_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderedTransaction.ProtoReflect.Descriptor instead.
func (*OrderedTransaction) Descriptor() ([]byte, []int) {
	return file_sequencer_proto_rawDescGZIP(), []int{10}
}

func (x *OrderedTransaction) GetTransaction() *Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *OrderedTransaction) GetSequenceNumber() uint64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *OrderedTransaction) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *OrderedTransaction) GetIngestionTimestamp() uint64 {
	if x != nil {
		return x.IngestionTimestamp
	}
	return 0
}

// New message types for chain state queries
type GetTransactionRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Transaction hash (32-bit as hex string)
	TxHash        string `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTransactionRequest) Reset() {
	*x = GetTransactionRequest{}
	mi := &file_sequencer_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionRequest) ProtoMessage() {}

func (x *GetTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sequencer_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionRequest.ProtoReflect.Descriptor instead.
func (*GetTransactionRequest) Descriptor() ([]byte, []int) {
	return file_sequencer_proto_rawDescGZIP(), []int{11}
}

func (x *GetTransactionRequest) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

type GetTransactionResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Transaction details if found
	Transaction *OrderedTransaction `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	// Tick number where transaction was included
	TickNumber uint64 `protobuf:"varint,2,opt,name=tick_number,json=tickNumber,proto3" json:"tick_number,omitempty"`
	// Whether transaction was found
	Found         bool `protobuf:"varint,3,opt,name=found,proto3" json:"found,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTransactionResponse) Reset() {
	*x = GetTransactionResponse{}
	mi := &file_sequencer_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionResponse) ProtoMessage() {}

func (x *GetTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sequencer_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionResponse.ProtoReflect.Descriptor instead.
func (*GetTransactionResponse) Descriptor() ([]byte, []int) {
	return file_sequencer_proto_rawDescGZIP(), []int{12}
}

func (x *GetTransactionResponse) GetTransaction() *OrderedTransaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *GetTransactionResponse) GetTickNumber() uint64 {
	if x != nil {
		return x.TickNumber
	}
	return 0
}

func (x *GetTransactionResponse) GetFound() bool {
	if x != nil {
		return x.Found
	}
	return false
}

type GetTickRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TickNumber    uint64                 `protobuf:"varint,1,opt,name=tick_number,json=tickNumber,proto3" json:"tick_number,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTickRequest) Reset() {
	*x = GetTickRequest{}
	mi := &file_sequencer_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTickRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTickRequest) ProtoMessage() {}

func (x *GetTickRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sequencer_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTickRequest.ProtoReflect.Descriptor instead.
func (*GetTickRequest) Descriptor() ([]byte, []int) {
	return file_sequencer_proto_rawDescGZIP(), []int{13}
}

func (x *GetTickRequest) GetTickNumber() uint64 {
	if x != nil {
		return x.TickNumber
	}
	return 0
}

type GetTickResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Tick details if found
	Tick *Tick `protobuf:"bytes,1,opt,name=tick,proto3" json:"tick,omitempty"`
	// Whether tick was found
	Found         bool `protobuf:"varint,2,opt,name=found,proto3" json:"found,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTickResponse) Reset() {
	*x = GetTickResponse{}
	mi := &file_sequencer_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTickResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTickResponse) ProtoMessage() {}

func (x *GetTickResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sequencer_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTickResponse.ProtoReflect.Descriptor instead.
func (*GetTickResponse) Descriptor() ([]byte, []int) {
	return file_sequencer_proto_rawDescGZIP(), []int{14}
}

func (x *GetTickResponse) GetTick() *Tick {
	if x != nil {
		return x.Tick
	}
	return nil
}

func (x *GetTickResponse) GetFound() bool {
	if x != nil {
		return x.Found
	}
	return false
}

type GetChainStateRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional: limit number of recent ticks returned
	TickLimit     uint32 `protobuf:"varint,1,opt,name=tick_limit,json=tickLimit,proto3" json:"tick_limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetChainStateRequest) Reset() {
	*x = GetChainStateRequest{}
	mi := &file_sequencer_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChainStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChainStateRequest) ProtoMessage() {}

func (x *GetChainStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sequencer_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChainStateRequest.ProtoReflect.Descriptor instead.
func (*GetChainStateRequest) Descriptor() ([]byte, []int) {
	return file_sequencer_proto_rawDescGZIP(), []int{15}
}

func (x *GetChainStateRequest) GetTickLimit() uint32 {
	if x != nil {
		return x.TickLimit
	}
	return 0
}

type GetChainStateResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Current chain height (latest tick number)
	ChainHeight uint64 `protobuf:"varint,1,opt,name=chain_height,json=chainHeight,proto3" json:"chain_height,omitempty"`
	// Total number of transactions processed
	TotalTransactions uint64 `protobuf:"varint,2,opt,name=total_transactions,json=totalTransactions,proto3" json:"total_transactions,omitempty"`
	// Recent ticks (up to tick_limit)
	RecentTicks []*Tick `protobuf:"bytes,3,rep,name=recent_ticks,json=recentTicks,proto3" json:"recent_ticks,omitempty"`
	// Transaction to tick mapping (limited sample)
	TxToTickSample map[string]uint64 `protobuf:"bytes,4,rep,name=tx_to_tick_sample,json=txToTickSample,proto3" json:"tx_to_tick_sample,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetChainStateResponse) Reset() {
	*x = GetChainStateResponse{}
	mi := &file_sequencer_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChainStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChainStateResponse) ProtoMessage() {}

func (x *GetChainStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sequencer_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChainStateResponse.ProtoReflect.Descriptor instead.
func (*GetChainStateResponse) Descriptor() ([]byte, []int) {
	return file_sequencer_proto_rawDescGZIP(), []int{16}
}

func (x *GetChainStateResponse) GetChainHeight() uint64 {
	if x != nil {
		return x.ChainHeight
	}
	return 0
}

func (x *GetChainStateResponse) GetTotalTransactions() uint64 {
	if x != nil {
		return x.TotalTransactions
	}
	return 0
}

func (x *GetChainStateResponse) GetRecentTicks() []*Tick {
	if x != nil {
		return x.RecentTicks
	}
	return nil
}

func (x *GetChainStateResponse) GetTxToTickSample() map[string]uint64 {
	if x != nil {
		return x.TxToTickSample
	}
	return nil
}

var File_sequencer_proto protoreflect.FileDescriptor

const file_sequencer_proto_rawDesc = "" +
	"\n" +
	"\x0fsequencer.proto\x12\x16continuum.sequencer.v1\"\xad\x01\n" +
	"\vTransaction\x12\x13\n" +
	"\x05tx_id\x18\x01 \x01(\tR\x04txId\x12\x18\n" +
	"\apayload\x18\x02 \x01(\fR\apayload\x12\x1c\n" +
	"\tsignature\x18\x03 \x01(\fR\tsignature\x12\x1d\n" +
	"\n" +
	"public_key\x18\x04 \x01(\fR\tpublicKey\x12\x14\n" +
	"\x05nonce\x18\x05 \x01(\x04R\x05nonce\x12\x1c\n" +
	"\ttimestamp\x18\x06 \x01(\x04R\ttimestamp\"a\n" +
	"\x18SubmitTransactionRequest\x12E\n" +
	"\vtransaction\x18\x01 \x01(\v2#.continuum.sequencer.v1.TransactionR\vtransaction\"\x82\x01\n" +
	"\x19SubmitTransactionResponse\x12'\n" +
	"\x0fsequence_number\x18\x01 \x01(\x04R\x0esequenceNumber\x12#\n" +
	"\rexpected_tick\x18\x02 \x01(\x04R\fexpectedTick\x12\x17\n" +
	"\atx_hash\x18\x03 \x01(\tR\x06txHash\"]\n" +
	"\x12SubmitBatchRequest\x12G\n" +
	"\ftransactions\x18\x01 \x03(\v2#.continuum.sequencer.v1.TransactionR\ftransactions\"f\n" +
	"\x13SubmitBatchResponse\x12O\n" +
	"\tresponses\x18\x01 \x03(\v21.continuum.sequencer.v1.SubmitTransactionResponseR\tresponses\"\x12\n" +
	"\x10GetStatusRequest\"\xf7\x01\n" +
	"\x11GetStatusResponse\x12!\n" +
	"\fcurrent_tick\x18\x01 \x01(\x04R\vcurrentTick\x12-\n" +
	"\x12total_transactions\x18\x02 \x01(\x04R\x11totalTransactions\x121\n" +
	"\x14pending_transactions\x18\x03 \x01(\x04R\x13pendingTransactions\x12%\n" +
	"\x0euptime_seconds\x18\x04 \x01(\x04R\ruptimeSeconds\x126\n" +
	"\x17transactions_per_second\x18\x05 \x01(\x01R\x15transactionsPerSecond\"3\n" +
	"\x12StreamTicksRequest\x12\x1d\n" +
	"\n" +
	"start_tick\x18\x01 \x01(\x04R\tstartTick\"\xb3\x02\n" +
	"\x04Tick\x12\x1f\n" +
	"\vtick_number\x18\x01 \x01(\x04R\n" +
	"tickNumber\x12=\n" +
	"\tvdf_proof\x18\x02 \x01(\v2 .continuum.sequencer.v1.VdfProofR\bvdfProof\x12N\n" +
	"\ftransactions\x18\x03 \x03(\v2*.continuum.sequencer.v1.OrderedTransactionR\ftransactions\x124\n" +
	"\x16transaction_batch_hash\x18\x04 \x01(\tR\x14transactionBatchHash\x12\x1c\n" +
	"\ttimestamp\x18\x05 \x01(\x04R\ttimestamp\x12'\n" +
	"\x0fprevious_output\x18\x06 \x01(\tR\x0epreviousOutput\"n\n" +
	"\bVdfProof\x12\x14\n" +
	"\x05input\x18\x01 \x01(\tR\x05input\x12\x16\n" +
	"\x06output\x18\x02 \x01(\tR\x06output\x12\x14\n" +
	"\x05proof\x18\x03 \x01(\tR\x05proof\x12\x1e\n" +
	"\n" +
	"iterations\x18\x04 \x01(\x04R\n" +
	"iterations\"\xce\x01\n" +
	"\x12OrderedTransaction\x12E\n" +
	"\vtransaction\x18\x01 \x01(\v2#.continuum.sequencer.v1.TransactionR\vtransaction\x12'\n" +
	"\x0fsequence_number\x18\x02 \x01(\x04R\x0esequenceNumber\x12\x17\n" +
	"\atx_hash\x18\x03 \x01(\tR\x06txHash\x12/\n" +
	"\x13ingestion_timestamp\x18\x04 \x01(\x04R\x12ingestionTimestamp\"0\n" +
	"\x15GetTransactionRequest\x12\x17\n" +
	"\atx_hash\x18\x01 \x01(\tR\x06txHash\"\x9d\x01\n" +
	"\x16GetTransactionResponse\x12L\n" +
	"\vtransaction\x18\x01 \x01(\v2*.continuum.sequencer.v1.OrderedTransactionR\vtransaction\x12\x1f\n" +
	"\vtick_number\x18\x02 \x01(\x04R\n" +
	"tickNumber\x12\x14\n" +
	"\x05found\x18\x03 \x01(\bR\x05found\"1\n" +
	"\x0eGetTickRequest\x12\x1f\n" +
	"\vtick_number\x18\x01 \x01(\x04R\n" +
	"tickNumber\"Y\n" +
	"\x0fGetTickResponse\x120\n" +
	"\x04tick\x18\x01 \x01(\v2\x1c.continuum.sequencer.v1.TickR\x04tick\x12\x14\n" +
	"\x05found\x18\x02 \x01(\bR\x05found\"5\n" +
	"\x14GetChainStateRequest\x12\x1d\n" +
	"\n" +
	"tick_limit\x18\x01 \x01(\rR\ttickLimit\"\xdb\x02\n" +
	"\x15GetChainStateResponse\x12!\n" +
	"\fchain_height\x18\x01 \x01(\x04R\vchainHeight\x12-\n" +
	"\x12total_transactions\x18\x02 \x01(\x04R\x11totalTransactions\x12?\n" +
	"\frecent_ticks\x18\x03 \x03(\v2\x1c.continuum.sequencer.v1.TickR\vrecentTicks\x12l\n" +
	"\x11tx_to_tick_sample\x18\x04 \x03(\v2A.continuum.sequencer.v1.GetChainStateResponse.TxToTickSampleEntryR\x0etxToTickSample\x1aA\n" +
	"\x13TxToTickSampleEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x04R\x05value:\x028\x012\xec\x05\n" +
	"\x10SequencerService\x12x\n" +
	"\x11SubmitTransaction\x120.continuum.sequencer.v1.SubmitTransactionRequest\x1a1.continuum.sequencer.v1.SubmitTransactionResponse\x12f\n" +
	"\vSubmitBatch\x12*.continuum.sequencer.v1.SubmitBatchRequest\x1a+.continuum.sequencer.v1.SubmitBatchResponse\x12`\n" +
	"\tGetStatus\x12(.continuum.sequencer.v1.GetStatusRequest\x1a).continuum.sequencer.v1.GetStatusResponse\x12Y\n" +
	"\vStreamTicks\x12*.continuum.sequencer.v1.StreamTicksRequest\x1a\x1c.continuum.sequencer.v1.Tick0\x01\x12o\n" +
	"\x0eGetTransaction\x12-.continuum.sequencer.v1.GetTransactionRequest\x1a..continuum.sequencer.v1.GetTransactionResponse\x12Z\n" +
	"\aGetTick\x12&.continuum.sequencer.v1.GetTickRequest\x1a'.continuum.sequencer.v1.GetTickResponse\x12l\n" +
	"\rGetChainState\x12,.continuum.sequencer.v1.GetChainStateRequest\x1a-.continuum.sequencer.v1.GetChainStateResponseB$Z\"github.com/continuum/backend/protob\x06proto3"

var (
	file_sequencer_proto_rawDescOnce sync.Once
	file_sequencer_proto_rawDescData []byte
)

func file_sequencer_proto_rawDescGZIP() []byte {
	file_sequencer_proto_rawDescOnce.Do(func() {
		file_sequencer_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_sequencer_proto_rawDesc), len(file_sequencer_proto_rawDesc)))
	})
	return file_sequencer_proto_rawDescData
}

var file_sequencer_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_sequencer_proto_goTypes = []any{
	(*Transaction)(nil),               // 0: continuum.sequencer.v1.Transaction
	(*SubmitTransactionRequest)(nil),  // 1: continuum.sequencer.v1.SubmitTransactionRequest
	(*SubmitTransactionResponse)(nil), // 2: continuum.sequencer.v1.SubmitTransactionResponse
	(*SubmitBatchRequest)(nil),        // 3: continuum.sequencer.v1.SubmitBatchRequest
	(*SubmitBatchResponse)(nil),       // 4: continuum.sequencer.v1.SubmitBatchResponse
	(*GetStatusRequest)(nil),          // 5: continuum.sequencer.v1.GetStatusRequest
	(*GetStatusResponse)(nil),         // 6: continuum.sequencer.v1.GetStatusResponse
	(*StreamTicksRequest)(nil),        // 7: continuum.sequencer.v1.StreamTicksRequest
	(*Tick)(nil),                      // 8: continuum.sequencer.v1.Tick
	(*VdfProof)(nil),                  // 9: continuum.sequencer.v1.VdfProof
	(*OrderedTransaction)(nil),        // 10: continuum.sequencer.v1.OrderedTransaction
	(*GetTransactionRequest)(nil),     // 11: continuum.sequencer.v1.GetTransactionRequest
	(*GetTransactionResponse)(nil),    // 12: continuum.sequencer.v1.GetTransactionResponse
	(*GetTickRequest)(nil),            // 13: continuum.sequencer.v1.GetTickRequest
	(*GetTickResponse)(nil),           // 14: continuum.sequencer.v1.GetTickResponse
	(*GetChainStateRequest)(nil),      // 15: continuum.sequencer.v1.GetChainStateRequest
	(*GetChainStateResponse)(nil),     // 16: continuum.sequencer.v1.GetChainStateResponse
	nil,                               // 17: continuum.sequencer.v1.GetChainStateResponse.TxToTickSampleEntry
}
var file_sequencer_proto_depIdxs = []int32{
	0,  // 0: continuum.sequencer.v1.SubmitTransactionRequest.transaction:type_name -> continuum.sequencer.v1.Transaction
	0,  // 1: continuum.sequencer.v1.SubmitBatchRequest.transactions:type_name -> continuum.sequencer.v1.Transaction
	2,  // 2: continuum.sequencer.v1.SubmitBatchResponse.responses:type_name -> continuum.sequencer.v1.SubmitTransactionResponse
	9,  // 3: continuum.sequencer.v1.Tick.vdf_proof:type_name -> continuum.sequencer.v1.VdfProof
	10, // 4: continuum.sequencer.v1.Tick.transactions:type_name -> continuum.sequencer.v1.OrderedTransaction
	0,  // 5: continuum.sequencer.v1.OrderedTransaction.transaction:type_name -> continuum.sequencer.v1.Transaction
	10, // 6: continuum.sequencer.v1.GetTransactionResponse.transaction:type_name -> continuum.sequencer.v1.OrderedTransaction
	8,  // 7: continuum.sequencer.v1.GetTickResponse.tick:type_name -> continuum.sequencer.v1.Tick
	8,  // 8: continuum.sequencer.v1.GetChainStateResponse.recent_ticks:type_name -> continuum.sequencer.v1.Tick
	17, // 9: continuum.sequencer.v1.GetChainStateResponse.tx_to_tick_sample:type_name -> continuum.sequencer.v1.GetChainStateResponse.TxToTickSampleEntry
	1,  // 10: continuum.sequencer.v1.SequencerService.SubmitTransaction:input_type -> continuum.sequencer.v1.SubmitTransactionRequest
	3,  // 11: continuum.sequencer.v1.SequencerService.SubmitBatch:input_type -> continuum.sequencer.v1.SubmitBatchRequest
	5,  // 12: continuum.sequencer.v1.SequencerService.GetStatus:input_type -> continuum.sequencer.v1.GetStatusRequest
	7,  // 13: continuum.sequencer.v1.SequencerService.StreamTicks:input_type -> continuum.sequencer.v1.StreamTicksRequest
	11, // 14: continuum.sequencer.v1.SequencerService.GetTransaction:input_type -> continuum.sequencer.v1.GetTransactionRequest
	13, // 15: continuum.sequencer.v1.SequencerService.GetTick:input_type -> continuum.sequencer.v1.GetTickRequest
	15, // 16: continuum.sequencer.v1.SequencerService.GetChainState:input_type -> continuum.sequencer.v1.GetChainStateRequest
	2,  // 17: continuum.sequencer.v1.SequencerService.SubmitTransaction:output_type -> continuum.sequencer.v1.SubmitTransactionResponse
	4,  // 18: continuum.sequencer.v1.SequencerService.SubmitBatch:output_type -> continuum.sequencer.v1.SubmitBatchResponse
	6,  // 19: continuum.sequencer.v1.SequencerService.GetStatus:output_type -> continuum.sequencer.v1.GetStatusResponse
	8,  // 20: continuum.sequencer.v1.SequencerService.StreamTicks:output_type -> continuum.sequencer.v1.Tick
	12, // 21: continuum.sequencer.v1.SequencerService.GetTransaction:output_type -> continuum.sequencer.v1.GetTransactionResponse
	14, // 22: continuum.sequencer.v1.SequencerService.GetTick:output_type -> continuum.sequencer.v1.GetTickResponse
	16, // 23: continuum.sequencer.v1.SequencerService.GetChainState:output_type -> continuum.sequencer.v1.GetChainStateResponse
	17, // [17:24] is the sub-list for method output_type
	10, // [10:17] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_sequencer_proto_init() }
func file_sequencer_proto_init() {
	if File_sequencer_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_sequencer_proto_rawDesc), len(file_sequencer_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sequencer_proto_goTypes,
		DependencyIndexes: file_sequencer_proto_depIdxs,
		MessageInfos:      file_sequencer_proto_msgTypes,
	}.Build()
	File_sequencer_proto = out.File
	file_sequencer_proto_goTypes = nil
	file_sequencer_proto_depIdxs = nil
}
